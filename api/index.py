from flask import Flask, request, jsonify
from flask_cors import CORS
from flask_jwt_extended import JWTManager
from flask_bcrypt import Bcrypt
import os
from dotenv import load_dotenv
import PyPDF2
import openai
from openai import OpenAI
import google.generativeai as genai
import tempfile
from werkzeug.utils import secure_filename
from PIL import Image
import base64
import io
import requests
from bs4 import BeautifulSoup
from googlesearch import search
import re
import time
from database import Database
from auth import AuthManager, require_subscription, require_auth, require_admin

load_dotenv()

app = Flask(__name__)
CORS(app)

# Configura√ß√µes JWT
app.config['JWT_SECRET_KEY'] = os.getenv('JWT_SECRET_KEY', 'your-secret-key-change-in-production')  # Mude em produ√ß√£o
jwt = JWTManager(app)
bcrypt = Bcrypt(app)

# Inicializar banco de dados
db = Database()
db.init_database()

# Configurar APIs
client = OpenAI(
    base_url="https://openrouter.ai/api/v1",
    api_key=os.getenv("OPENROUTER_API_KEY"),
)

# Configurar Google Gemini
genai.configure(api_key=os.getenv("GOOGLE_API_KEY"))

ALLOWED_EXTENSIONS = {'pdf', 'png', 'jpg', 'jpeg'}

def allowed_file(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

def extract_text_from_pdf(file_path):
    text = ""
    with open(file_path, 'rb') as file:
        pdf_reader = PyPDF2.PdfReader(file)
        for page in pdf_reader.pages:
            text += page.extract_text() + "\n"
    return text

def check_plagiarism(text, max_searches=3):
    """Verifica poss√≠vel pl√°gio pesquisando frases na internet"""
    try:
        # Dividir o texto em senten√ßas
        sentences = re.split(r'[.!?]+', text)
        sentences = [s.strip() for s in sentences if len(s.strip()) > 20]
        
        plagiarism_results = []
        search_count = 0
        
        for sentence in sentences[:5]:  # Verificar apenas as primeiras 5 senten√ßas
            if search_count >= max_searches:
                break
                
            try:
                # Pesquisar a senten√ßa no Google
                search_query = f'"{sentence[:50]}"'  # Primeiras 50 palavras
                search_results = list(search(search_query, num_results=3, sleep_interval=1))
                
                if search_results:
                    for url in search_results:
                        try:
                            response = requests.get(url, timeout=5)
                            if response.status_code == 200:
                                soup = BeautifulSoup(response.content, 'html.parser')
                                page_text = soup.get_text().lower()
                                
                                if sentence.lower() in page_text:
                                    plagiarism_results.append({
                                        'sentence': sentence[:100] + "...",
                                        'url': url,
                                        'similarity': 'Alta'
                                    })
                                    break
                        except:
                            continue
                
                search_count += 1
                time.sleep(1)  # Respeitar rate limits
                
            except Exception as e:
                continue
        
        return plagiarism_results
        
    except Exception as e:
        return [{"error": f"Erro na verifica√ß√£o de pl√°gio: {str(e)}"}]

def analyze_image_with_gemini(image_path, theme=None):
    """Analisa uma imagem de reda√ß√£o manuscrita usando Google Gemini"""
    try:
        # Carregar a imagem
        image = Image.open(image_path)
        
        # Configurar o modelo Gemini
        model = genai.GenerativeModel('gemini-1.5-flash')
        
        if theme and theme.strip():
            prompt = f"""
Voc√™ √© um professor especialista em corre√ß√£o de reda√ß√µes do ENEM. Analise a reda√ß√£o manuscrita na imagem seguindo os crit√©rios do ENEM e o estilo espec√≠fico do aluno:

TEMA PROPOSTO: {theme}

CRIT√âRIOS ESPEC√çFICOS PARA AN√ÅLISE:
- ESTILO: Per√≠odos curtos, introdu√ß√µes concisas, estrutura sucinta
- ESTRUTURA: Duas problem√°ticas bem definidas 
- CONECTIVOS: Uso adequado de conectivos para flu√™ncia textual
- PROPOSTA DE INTERVEN√á√ÉO: Deve responder 5W2H (Quem, Onde, Quando, Como, O que se espera) + Nome da solu√ß√£o

INSTRU√á√ïES:
- Leia e transcreva todo o texto manuscrito
- Avalie adequa√ß√£o ao tema e estilo dissertativo-argumentativo
- Analise conectivos e coes√£o entre par√°grafos
- Verifique se h√° duas problem√°ticas claras
- Avalie proposta de interven√ß√£o completa (5W2H + nome)

FORNE√áA SUA AN√ÅLISE NO SEGUINTE FORMATO:

**TEMA PROPOSTO:** {theme}

**TEXTO TRANSCRITO:**
[Transcreva fielmente o texto manuscrito]

**VERIFICA√á√ÉO DE PL√ÅGIO:** 
[Ser√° verificado automaticamente ap√≥s a an√°lise]

**NOTA GERAL: [0-1000]**

**AN√ÅLISE DO ESTILO ESPEC√çFICO:**
- Per√≠odos: [Avalie se os per√≠odos est√£o adequadamente curtos e claros]
- Introdu√ß√£o: [Analise se a introdu√ß√£o √© concisa e eficaz]
- Estrutura: [Verifique se h√° duas problem√°ticas bem desenvolvidas]
- Conectivos: [Analise uso e variedade dos conectivos]

**COMPET√äNCIA 1 - DOM√çNIO DA NORMA PADR√ÉO (0-200):**
Nota: [0-200]
An√°lise: [an√°lise detalhada considerando per√≠odos curtos e clareza]

**COMPET√äNCIA 2 - COMPREENS√ÉO DA PROPOSTA (0-200):**
Nota: [0-200]
An√°lise: [an√°lise do tema, foco nas duas problem√°ticas]

**COMPET√äNCIA 3 - SELE√á√ÉO E ORGANIZA√á√ÉO DAS INFORMA√á√ïES (0-200):**
Nota: [0-200]
An√°lise: [argumenta√ß√£o, repert√≥rio, organiza√ß√£o das duas problem√°ticas]

**COMPET√äNCIA 4 - CONHECIMENTO DOS MECANISMOS LINGU√çSTICOS (0-200):**
Nota: [0-200]
An√°lise: [coes√£o, coer√™ncia, conectivos entre par√°grafos]

**COMPET√äNCIA 5 - PROPOSTA DE INTERVEN√á√ÉO (0-200):**
Nota: [0-200]
An√°lise detalhada 5W2H:
- QUEM resolve: [Identificar agente]
- ONDE resolver: [Identificar local/√¢mbito]
- QUANDO resolver: [Identificar prazo/momento]
- COMO resolver: [Identificar meio/estrat√©gia]
- O QUE SE ESPERA: [Identificar resultado esperado]
- NOME DA SOLU√á√ÉO: [Verificar se foi dado nome criativo √† proposta]

**CONECTIVOS UTILIZADOS:**
- [Liste os principais conectivos encontrados e avalie variedade]

**PONTOS FORTES:**
- [Considerando o estilo espec√≠fico]

**PONTOS A MELHORAR:**
- [Sugest√µes espec√≠ficas para o estilo]

**DICAS DE CONECTIVOS:**
- [Sugest√µes de conectivos para melhorar a flu√™ncia]

**VERS√ÉO CORRIGIDA (TRECHOS PRINCIPAIS):**
[Reescreva mantendo per√≠odos curtos e estilo conciso]
"""
        else:
            prompt = f"""
Voc√™ √© um professor especialista em corre√ß√£o de reda√ß√µes do ENEM. Analise a reda√ß√£o manuscrita seguindo crit√©rios espec√≠ficos do ENEM e estilo do aluno:

CRIT√âRIOS ESPEC√çFICOS:
- ESTILO: Per√≠odos curtos, introdu√ß√µes concisas, estrutura sucinta
- ESTRUTURA: Duas problem√°ticas bem definidas
- CONECTIVOS: Uso adequado para flu√™ncia textual
- PROPOSTA: 5W2H completo + Nome da solu√ß√£o

FORNE√áA SUA AN√ÅLISE NO SEGUINTE FORMATO:

**TEXTO TRANSCRITO:**
[Transcreva fielmente o texto manuscrito]

**TEMA IDENTIFICADO:**
[Identifique o tema abordado]

**VERIFICA√á√ÉO DE PL√ÅGIO:** 
[Ser√° verificado automaticamente]

**NOTA GERAL: [0-1000]**

**AN√ÅLISE DO ESTILO ESPEC√çFICO:**
- Per√≠odos: [Avalie clareza dos per√≠odos curtos]
- Introdu√ß√£o: [Analise concis√£o da introdu√ß√£o]
- Estrutura: [Verifique duas problem√°ticas]
- Conectivos: [Analise uso dos conectivos]

**COMPET√äNCIA 1 - DOM√çNIO DA NORMA PADR√ÉO (0-200):**
Nota: [0-200]
An√°lise: [considerando estilo de per√≠odos curtos]

**COMPET√äNCIA 2 - COMPREENS√ÉO DA PROPOSTA (0-200):**
Nota: [0-200]
An√°lise: [foco nas duas problem√°ticas]

**COMPET√äNCIA 3 - SELE√á√ÉO E ORGANIZA√á√ÉO DAS INFORMA√á√ïES (0-200):**
Nota: [0-200]
An√°lise: [organiza√ß√£o das problem√°ticas e argumenta√ß√£o]

**COMPET√äNCIA 4 - CONHECIMENTO DOS MECANISMOS LINGU√çSTICOS (0-200):**
Nota: [0-200]
An√°lise: [conectivos e coes√£o textual]

**COMPET√äNCIA 5 - PROPOSTA DE INTERVEN√á√ÉO (0-200):**
Nota: [0-200]
An√°lise 5W2H:
- QUEM resolve: [Agente identificado]
- ONDE resolver: [Local/√¢mbito]
- QUANDO resolver: [Prazo/momento]
- COMO resolver: [Meio/estrat√©gia]
- O QUE SE ESPERA: [Resultado esperado]
- NOME DA SOLU√á√ÉO: [Nome criativo dado √† proposta]

**CONECTIVOS UTILIZADOS:**
[Liste e avalie os conectivos]

**PONTOS FORTES:**
[Considerando estilo espec√≠fico]

**PONTOS A MELHORAR:**
[Sugest√µes para o estilo]

**DICAS DE CONECTIVOS:**
[Sugest√µes espec√≠ficas]

**VERS√ÉO CORRIGIDA:**
[Mantenha per√≠odos curtos e estilo conciso]
"""
        
        # Fazer a an√°lise
        response = model.generate_content([prompt, image])
        return response.text
        
    except Exception as e:
        return f"Erro ao analisar a imagem: {str(e)}"

def analyze_essay(text, theme=None, plagiarism_results=None):
    # Preparar informa√ß√£o sobre pl√°gio
    plagiarism_info = ""
    if plagiarism_results:
        if any("error" in result for result in plagiarism_results):
            plagiarism_info = "‚ö†Ô∏è N√£o foi poss√≠vel verificar pl√°gio completamente."
        elif plagiarism_results:
            plagiarism_info = f"üö® ATEN√á√ÉO: Poss√≠vel pl√°gio detectado em {len(plagiarism_results)} trechos."
        else:
            plagiarism_info = "‚úÖ Nenhum pl√°gio detectado."
    
    if theme and theme.strip():
        prompt = f"""
Voc√™ √© um professor especialista em corre√ß√£o de reda√ß√µes do ENEM. Analise a reda√ß√£o seguindo os crit√©rios do ENEM e o estilo espec√≠fico do aluno:

TEMA PROPOSTO: {theme}

REDA√á√ÉO:
{text}

CRIT√âRIOS ESPEC√çFICOS PARA AN√ÅLISE:
- ESTILO: Per√≠odos curtos, introdu√ß√µes concisas, estrutura sucinta
- ESTRUTURA: Duas problem√°ticas bem definidas
- CONECTIVOS: Uso adequado de conectivos para flu√™ncia textual  
- PROPOSTA DE INTERVEN√á√ÉO: Deve responder 5W2H (Quem, Onde, Quando, Como, O que se espera) + Nome da solu√ß√£o

VERIFICA√á√ÉO DE PL√ÅGIO: {plagiarism_info}

INSTRU√á√ïES:
- Avalie adequa√ß√£o ao tema e estilo dissertativo-argumentativo
- Analise conectivos e coes√£o entre par√°grafos
- Verifique se h√° duas problem√°ticas claras
- Avalie proposta de interven√ß√£o completa (5W2H + nome)

FORNE√áA SUA AN√ÅLISE NO SEGUINTE FORMATO:

**TEMA PROPOSTO:** {theme}

**VERIFICA√á√ÉO DE PL√ÅGIO:** {plagiarism_info}

**NOTA GERAL: [0-1000]**

**AN√ÅLISE DO ESTILO ESPEC√çFICO:**
- Per√≠odos: [Avalie se os per√≠odos est√£o adequadamente curtos e claros]
- Introdu√ß√£o: [Analise se a introdu√ß√£o √© concisa e eficaz]
- Estrutura: [Verifique se h√° duas problem√°ticas bem desenvolvidas]
- Conectivos: [Analise uso e variedade dos conectivos]

**COMPET√äNCIA 1 - DOM√çNIO DA NORMA PADR√ÉO (0-200):**
Nota: [0-200]
An√°lise: [considerando per√≠odos curtos e clareza textual]

**COMPET√äNCIA 2 - COMPREENS√ÉO DA PROPOSTA (0-200):**
Nota: [0-200]
An√°lise: [an√°lise do tema com foco nas duas problem√°ticas]

**COMPET√äNCIA 3 - SELE√á√ÉO E ORGANIZA√á√ÉO DAS INFORMA√á√ïES (0-200):**
Nota: [0-200]
An√°lise: [argumenta√ß√£o, repert√≥rio, organiza√ß√£o das duas problem√°ticas]

**COMPET√äNCIA 4 - CONHECIMENTO DOS MECANISMOS LINGU√çSTICOS (0-200):**
Nota: [0-200]
An√°lise: [coes√£o, coer√™ncia, conectivos entre par√°grafos e ideias]

**COMPET√äNCIA 5 - PROPOSTA DE INTERVEN√á√ÉO (0-200):**
Nota: [0-200]
An√°lise detalhada 5W2H:
- QUEM resolve: [Identificar e avaliar o agente respons√°vel]
- ONDE resolver: [Identificar local/√¢mbito de aplica√ß√£o]
- QUANDO resolver: [Identificar prazo ou momento de implementa√ß√£o]
- COMO resolver: [Identificar meio, estrat√©gia ou m√©todo]
- O QUE SE ESPERA: [Identificar resultado ou impacto esperado]
- NOME DA SOLU√á√ÉO: [Verificar se foi dado um nome criativo/espec√≠fico √† proposta]

**CONECTIVOS UTILIZADOS:**
- [Liste os principais conectivos encontrados e avalie sua variedade e adequa√ß√£o]

**PROBLEM√ÅTICAS IDENTIFICADAS:**
1. [Primeira problem√°tica apresentada]
2. [Segunda problem√°tica apresentada]

**PONTOS FORTES:**
- [Considerando o estilo espec√≠fico do aluno]

**PONTOS A MELHORAR:**
- [Sugest√µes espec√≠ficas para o estilo de per√≠odos curtos]

**DICAS DE CONECTIVOS:**
- Para introduzir ideias: [sugest√µes]
- Para contrastar: [sugest√µes]  
- Para concluir: [sugest√µes]

**VERS√ÉO CORRIGIDA (TRECHOS PRINCIPAIS):**
[Reescreva mantendo per√≠odos curtos e estilo conciso]
"""
    else:
        prompt = f"""
Voc√™ √© um professor especialista em corre√ß√£o de reda√ß√µes do ENEM. Analise a reda√ß√£o seguindo crit√©rios espec√≠ficos do ENEM e estilo do aluno:

REDA√á√ÉO:
{text}

CRIT√âRIOS ESPEC√çFICOS:
- ESTILO: Per√≠odos curtos, introdu√ß√µes concisas, estrutura sucinta
- ESTRUTURA: Duas problem√°ticas bem definidas
- CONECTIVOS: Uso adequado para flu√™ncia textual
- PROPOSTA: 5W2H completo + Nome da solu√ß√£o

VERIFICA√á√ÉO DE PL√ÅGIO: {plagiarism_info}

FORNE√áA SUA AN√ÅLISE NO SEGUINTE FORMATO:

**TEMA IDENTIFICADO:**
[Identifique o tema abordado na reda√ß√£o]

**VERIFICA√á√ÉO DE PL√ÅGIO:** {plagiarism_info}

**NOTA GERAL: [0-1000]**

**AN√ÅLISE DO ESTILO ESPEC√çFICO:**
- Per√≠odos: [Avalie clareza dos per√≠odos curtos]
- Introdu√ß√£o: [Analise concis√£o da introdu√ß√£o]
- Estrutura: [Verifique duas problem√°ticas]
- Conectivos: [Analise uso dos conectivos]

**COMPET√äNCIA 1 - DOM√çNIO DA NORMA PADR√ÉO (0-200):**
Nota: [0-200]
An√°lise: [considerando estilo de per√≠odos curtos]

**COMPET√äNCIA 2 - COMPREENS√ÉO DA PROPOSTA (0-200):**
Nota: [0-200]
An√°lise: [tema e foco nas duas problem√°ticas]

**COMPET√äNCIA 3 - SELE√á√ÉO E ORGANIZA√á√ÉO DAS INFORMA√á√ïES (0-200):**
Nota: [0-200]
An√°lise: [organiza√ß√£o das problem√°ticas e argumenta√ß√£o]

**COMPET√äNCIA 4 - CONHECIMENTO DOS MECANISMOS LINGU√çSTICOS (0-200):**
Nota: [0-200]
An√°lise: [conectivos e coes√£o textual]

**COMPET√äNCIA 5 - PROPOSTA DE INTERVEN√á√ÉO (0-200):**
Nota: [0-200]
An√°lise 5W2H:
- QUEM resolve: [Agente identificado]
- ONDE resolver: [Local/√¢mbito]
- QUANDO resolver: [Prazo/momento]
- COMO resolver: [Meio/estrat√©gia]
- O QUE SE ESPERA: [Resultado esperado]
- NOME DA SOLU√á√ÉO: [Nome criativo dado √† proposta]

**CONECTIVOS UTILIZADOS:**
[Liste e avalie os conectivos]

**PROBLEM√ÅTICAS IDENTIFICADAS:**
1. [Primeira problem√°tica]
2. [Segunda problem√°tica]

**PONTOS FORTES:**
[Considerando estilo espec√≠fico]

**PONTOS A MELHORAR:**
[Sugest√µes para o estilo]

**DICAS DE CONECTIVOS:**
[Sugest√µes espec√≠ficas de conectivos]

**VERS√ÉO CORRIGIDA:**
[Mantenha per√≠odos curtos e estilo conciso]
"""

    try:
        response = client.chat.completions.create(
            model="anthropic/claude-3.5-sonnet",
            messages=[
                {"role": "system", "content": "Voc√™ √© um professor especialista em corre√ß√£o de reda√ß√µes do ENEM com mais de 20 anos de experi√™ncia, especializado em an√°lise de textos com per√≠odos curtos, estruturas sucintas e propostas de interven√ß√£o detalhadas."},
                {"role": "user", "content": prompt}
            ],
            max_tokens=2500,
            temperature=0.3
        )
        
        return response.choices[0].message.content
        
    except Exception as e:
        return f"Erro ao processar a reda√ß√£o: {str(e)}"

@app.route('/', methods=['GET'])
def home():
    return jsonify({"message": "Tecxto IA - API de Corre√ß√£o de Reda√ß√µes - Ativa"})

# Endpoints de autentica√ß√£o
@app.route('/auth/register', methods=['POST'])
def register():
    data = request.get_json()
    
    if not data or not data.get('username') or not data.get('password') or not data.get('email'):
        return jsonify({"error": "Username, email e password s√£o obrigat√≥rios"}), 400
    
    success, user_id, message = AuthManager.register_user(
        data['username'], 
        data['email'], 
        data['password']
    )
    
    if success:
        return jsonify({
            "message": message,
            "user_id": user_id
        }), 201
    
    return jsonify({"error": message}), 400

@app.route('/auth/login', methods=['POST'])
def login():
    data = request.get_json()
    
    if not data or not data.get('username') or not data.get('password'):
        return jsonify({"error": "Username e password s√£o obrigat√≥rios"}), 400
    
    success, user_data, message = AuthManager.login_user(
        data['username'],
        data['password']
    )
    
    if success:
        return jsonify({
            "message": message,
            "data": user_data
        }), 200
    
    return jsonify({"error": message}), 401

@app.route('/auth/verify-token', methods=['GET'])
@require_auth
def verify_token():
    """Verifica se o token √© v√°lido e retorna dados do usu√°rio"""
    from flask_jwt_extended import get_jwt_identity
    user_id = get_jwt_identity()
    
    # Buscar dados do usu√°rio
    conn = db.get_connection()
    cursor = conn.cursor()
    
    cursor.execute('''
    SELECT username, email, is_admin FROM users WHERE id = ? AND is_active = 1
    ''', (user_id,))
    
    result = cursor.fetchone()
    conn.close()
    
    if not result:
        return jsonify({"error": "Usu√°rio n√£o encontrado"}), 404
    
    username, email, is_admin = result
    
    # Verificar assinatura
    has_subscription, end_date, usage_count = db.check_user_subscription(user_id)
    
    return jsonify({
        "message": "Token v√°lido",
        "data": {
            "user_id": user_id,
            "username": username,
            "email": email,
            "is_admin": bool(is_admin),
            "has_subscription": has_subscription,
            "subscription_end": end_date.isoformat() if end_date else None,
            "usage_count": usage_count
        }
    }), 200

@app.route('/auth/redeem-code', methods=['POST'])
@require_auth
def redeem_payment_code():
    from flask_jwt_extended import get_jwt_identity
    user_id = get_jwt_identity()
    
    data = request.get_json()
    if not data or not data.get('payment_code'):
        return jsonify({"error": "C√≥digo de pagamento √© obrigat√≥rio"}), 400
    
    success, message = db.use_payment_code(data['payment_code'], user_id)
    
    if success:
        # Buscar nova informa√ß√£o da assinatura
        has_subscription, end_date, usage_count = db.check_user_subscription(user_id)
        
        return jsonify({
            "message": message,
            "subscription": {
                "active": has_subscription,
                "end_date": end_date.isoformat() if end_date else None,
                "usage_count": usage_count
            }
        }), 200
    
    return jsonify({"error": message}), 400

@app.route('/auth/subscription-status', methods=['GET'])
@require_auth
def subscription_status():
    from flask_jwt_extended import get_jwt_identity
    user_id = get_jwt_identity()
    
    has_subscription, end_date, usage_count = db.check_user_subscription(user_id)
    
    return jsonify({
        "subscription": {
            "active": has_subscription,
            "end_date": end_date.isoformat() if end_date else None,
            "usage_count": usage_count
        }
    }), 200

# Endpoints administrativos
@app.route('/admin/users', methods=['GET'])
@require_admin
def admin_list_users():
    users = db.get_all_users()
    
    users_list = []
    for user in users:
        users_list.append({
            'id': user[0],
            'username': user[1],
            'email': user[2],
            'created_at': user[3],
            'is_active': user[4],
            'subscription_end': user[5],
            'usage_count': user[6],
            'has_subscription': user[7]
        })
    
    return jsonify({'users': users_list}), 200

@app.route('/admin/activate-user', methods=['POST'])
@require_admin
def admin_activate_user():
    from flask_jwt_extended import get_jwt_identity
    admin_id = get_jwt_identity()
    
    data = request.get_json()
    if not data or not data.get('user_id') or not data.get('days'):
        return jsonify({"error": "user_id e days s√£o obrigat√≥rios"}), 400
    
    success, message = db.activate_user_subscription(
        data['user_id'],
        data['days'],
        admin_id
    )
    
    if success:
        return jsonify({"message": message}), 200
    
    return jsonify({"error": message}), 400

@app.route('/analyze', methods=['POST'])
@require_subscription
def analyze_essay_endpoint():
    if 'file' not in request.files:
        return jsonify({"error": "Nenhum arquivo foi enviado"}), 400
    
    file = request.files['file']
    theme = request.form.get('theme', None)
    
    if file.filename == '':
        return jsonify({"error": "Nenhum arquivo selecionado"}), 400
    
    if not allowed_file(file.filename):
        return jsonify({"error": "Formato de arquivo n√£o permitido. Aceitos: PDF, PNG, JPG, JPEG."}), 400
    
    try:
        filename = secure_filename(file.filename)
        file_extension = filename.rsplit('.', 1)[1].lower()
        
        with tempfile.NamedTemporaryFile(delete=False, suffix=f'.{file_extension}') as temp_file:
            file.save(temp_file.name)
            
            if file_extension == 'pdf':
                # An√°lise de PDF com texto digital
                text = extract_text_from_pdf(temp_file.name)
                
                if not text.strip():
                    return jsonify({"error": "N√£o foi poss√≠vel extrair texto do PDF"}), 400
                
                # Verificar pl√°gio para PDFs
                print("Verificando pl√°gio...")
                plagiarism_results = check_plagiarism(text)
                
                analysis = analyze_essay(text, theme, plagiarism_results)
                extracted_text = text[:500] + "..." if len(text) > 500 else text
                
                # Adicionar detalhes do pl√°gio na resposta
                plagiarism_details = []
                if plagiarism_results and not any("error" in result for result in plagiarism_results):
                    plagiarism_details = plagiarism_results
                
            else:
                # An√°lise de imagem com Google Gemini (pl√°gio ser√° verificado pelo Gemini)
                analysis = analyze_image_with_gemini(temp_file.name, theme)
                extracted_text = "Texto extra√≠do da imagem manuscrita (veja na an√°lise)"
                plagiarism_details = []  # Gemini faz sua pr√≥pria verifica√ß√£o
            
            os.unlink(temp_file.name)
            
            return jsonify({
                "success": True,
                "file_type": "PDF" if file_extension == 'pdf' else "Imagem",
                "extracted_text": extracted_text,
                "analysis": analysis,
                "theme": theme,
                "plagiarism_check": len(plagiarism_details) > 0 if file_extension == 'pdf' else "Verificado pelo Gemini",
                "plagiarism_details": plagiarism_details
            })
    
    except Exception as e:
        return jsonify({"error": f"Erro interno do servidor: {str(e)}"}), 500

if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0', port=5000)

# Para o Vercel
app = app